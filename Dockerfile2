FROM alpine:latest
WORKDIR /usr/src/app
RUN chmod 777 /usr/src/app
ENV TZ Asia/Dhaka
ARG TARGETPLATFORM BUILDPLATFORM
RUN apk update
RUN apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/testing --update
RUN apk add alpine-sdk git rclone libtool autoconf automake linux-headers musl-dev m4 \
    build-base perl ca-certificates python3 python3-dev py3-pip py3-wheel aria2 qbittorrent-nox p7zip \
    tzdata xz curl pv jq unzip tar wget ffmpeg libpq-dev libffi-dev \
    zlib-dev zlib-static curl-dev curl-static openssl-dev openssl-libs-static \
    freeimage freeimage-dev unzip tar xz wget swig boost-dev \
    clang clang-dev ccache gettext gettext-dev \
    gawk  libpthread-stubs libjpeg-turbo-dev py3-virtualenv libffi \
    dpkg cmake icu-data-full apk-tools \
    nodejs coreutils npm bash-completion bash-doc \
    speedtest-cli mediainfo bash \
    musl-utils gcompat libmagic \
    sqlite-dev sqlite-static  libsodium-dev libsodium-static \
    && npm install -g localtunnel kill-port 

RUN wget https://github.com/tonmoyislam250/fluffy-guide/releases/download/v1.0.7/packages.tar.gz \
    && tar -xzf packages.tar.gz && \
    cd packages/crypto/x86_64/ && apk add --allow-untrusted *.apk && \
    cd ../../cares/x86_64/ && apk add --allow-untrusted *.apk

RUN echo -e "\e[32m[INFO]: Installing Cloudflared Tunnel.\e[0m" && \
    case ${TARGETPLATFORM} in \
         "linux/amd64")  ARCH=amd64  ;; \
         "linux/arm64")  ARCH=arm64  ;; \
         "linux/arm/v7") ARCH=arm    ;; \
    esac && \
    wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH}.deb -O cloudflared-linux-${ARCH}.deb && \
    dpkg -i --force-architecture cloudflared-linux-${ARCH}.deb


RUN echo -e "\e[32m[INFO]: Building and Installing MegaSdkC++.\e[0m" && \
    git clone https://github.com/meganz/sdk.git ~/home/sdk && \
    cd ~/home/sdk && git checkout v4.8.0 && rm -rf .git && \
    autoupdate -fIv && ./autogen.sh && \
    ./configure CFLAGS='-fpermissive' CXXFLAGS='-fpermissive' CPPFLAGS='-fpermissive' CCFLAGS='-fpermissive' \
    --disable-silent-rules --enable-python --with-sodium --disable-examples --with-python3 && \
    make -j$(nproc --all) && \
    cd bindings/python/ && \
    python3 setup.py bdist_wheel && \
    cd dist && ls && \
    pip3 install *.whl

RUN type ffmpeg && type aria2c && type qbittorrent-nox
RUN mv /usr/bin/aria2c /usr/bin/mrbeast && mkdir -pv /usr/src/test && mkdir -pv /usr/src/binary && \
    mv /usr/bin/qbittorrent-nox /usr/bin/pewdiepie && \
    mv /usr/bin/ffmpeg /usr/bin/mutahar
COPY requirements2.txt .
RUN pip3 install --no-cache-dir -r requirements2.txt
COPY pewdiepie.pyx setup.py /usr/src/test/
RUN cd /usr/src/test/ && python3 setup.py build_ext --inplace && cp pewdiepie.cpython-311-x86_64-linux-musl.so /usr/src/binary/pewdiepie.so
COPY start.sh race.py .
RUN ls -la /usr/src/binary/ && ls -la


ENV LANG="en_US.UTF-8" LANGUAGE="en_US:en" LC_ALL="en_US.UTF-8"
RUN echo 'export LC_ALL=en_US.UTF-8' >> /etc/profile.d/locale.sh && \
    sed -i 's|LANG=C.UTF-8|LANG=en_US.UTF-8|' /etc/profile.d/locale.sh && \
    cp /usr/share/zoneinfo/Asia/Dhaka /etc/localtime
